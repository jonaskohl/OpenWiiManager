using OpenWiiManager.Checking;
using OpenWiiManager.Language.Attributes;
using OpenWiiManager.Language.Extensions;
using OpenWiiManager.Tools;
using System.Reflection;
using System.Xml.Linq;

namespace OpenWiiManager.Core
{
    public abstract class SerializableStateHolder
    {
        protected abstract string FilePath { get; }

        const int STATE_FORMAT = 1;

        public SerializableStateHolder()
        {
            Deserialize();
        } 

        protected void Serialize()
        {
            var doc = new XDocument(
                new XText(Environment.NewLine),
                new XComment("THIS FILE IS AUTO-GENERATED. DO NOT EDIT THIS FILE MANUALLY!"),
                new XText(Environment.NewLine),
                new XElement("state", new XAttribute("format", STATE_FORMAT),
                    GetSerializableFields()
                        .Select(f => new XElement(
                            f.Name,
                            f.GetValue(this).SerializeToXmlNode()
                        ))
                )
            );

            IOUtil.EnsureDirectoryExists(Path.GetDirectoryName(FilePath) ?? "");

            doc.SaveWithoutFormatting(FilePath);
        }

        protected IEnumerable<FieldInfo> GetSerializableFields()
        {
            return GetType()
                .GetFields(BindingFlags.Instance | BindingFlags.NonPublic)
                .Where(f => f.GetCustomAttribute<StateSerializationAttribute>() != null);
        }

        protected void Deserialize()
        {
            if (!File.Exists(FilePath))
                return;

            var doc = XDocument.Load(FilePath);
            RuntimeAssertions.True(doc.Root?.Name == "state", $"Wrong root tag. Got {doc.Root?.Name ?? "<NULL>"}");
            RuntimeAssertions.True(doc.Root?.Attribute("format")?.Value == STATE_FORMAT.ToString(), "Wrong format version");

            var fields = GetSerializableFields();
            foreach (var field in fields)
            {
                var name = field.Name;
                var element = doc.Root?.Element(name);
                if (element == null) continue;
                var child = element.Descendants().FirstOrDefault();
                if (child == null) continue;
                try
                {
                    var value = SerializationUtil.DeserializeFromXmlNode(field.FieldType, child);
                    field.SetValue(this, value);
                }
                catch (TypeInitializationException) { }
                catch (InvalidOperationException) { }
            }
        }
    }
}